<!--from itertools import takewhile

s= "S->iEtS|iEtSeS|a"

def groupby(ls):
    d = {}
    ls = [ y[0] for y in rules ]
    initial = list(set(ls))
    for y in initial:
        for i in rules:
            if i.startswith(y):
                if y not in d:
                    d[y] = []
                d[y].append(i)
    return d

def prefix(x):
    return len(set(x)) == 1


starting=""
rules=[]
common=[]
alphabetset=["A'","B'","C'","D'","E'","F'","G'","H'","I'","J'","K'","L'","M'","N'","O'","P'","Q'","R'","S'","T'","U'","V'","W'","X'","Y'","Z'"]
s = s.replace(" ", "").replace("	", "").replace("\n", "")

while(True):
    rules=[]
    common=[]
    split=s.split("->")
    starting=split[0]
    for i in split[1].split("|"):
        rules.append(i)

#logic for taking commons out
    for k, l in groupby(rules).items():
        r = [l[0] for l in takewhile(prefix, zip(*l))]
        common.append(''.join(r))
#end of taking commons
    for i in common:
        newalphabet=alphabetset.pop()
        print(starting+"->"+i+newalphabet)
        index=[]
        for k in rules:
            if(k.startswith(i)):
                index.append(k)
        print(newalphabet+"->",end="")
        for j in index[:-1]:
            stringtoprint=j.replace(i,"", 1)+"|"
            if stringtoprint=="|":
                print("\u03B5","|",end="")
            else:
                print(j.replace(i,"", 1)+"|",end="")
        stringtoprint=index[-1].replace(i,"", 1)+"|"
        if stringtoprint=="|":
            print("\u03B5","",end="")
        else:
            print(index[-1].replace(i,"", 1)+"",end="")
        print("")
    break
-->
non_terminal = 'S'
productions = 'iEtS|iEtSeS|a|iES'
def left_factoring(productions,non_terminal):
    words = [word for word in productions.split('|') if word != '']
    if len(words) > 1:
        counts = {}
        for word in words:
            prefix = ''
            for i in range(len(word)):
                prefix += word[i]
                counts[prefix] = counts.get(prefix, 0) + 1

        try:
            alpha = max((key for key, value in counts.items() if value > len(words) / 2), key=len)

            non_terminal_prime = ''
            gamma = []
            for word in words:
                if alpha in word:
                    non_terminal_prime += word.replace(alpha, '') + '|'
                else:
                    gamma.append(word)

            print(f"{non_terminal} --> {alpha}{non_terminal}'{'|' + '|'.join(gamma) if gamma else ''}")
            print(f"{non_terminal}' --> {non_terminal_prime[:-1]}#")

            
            non_terminal = non_terminal + "'"
            left_factoring(non_terminal_prime)
        except:
            print('...................')


print(f"The given grammar is: {non_terminal} --> {productions}")
print("After Left Factoring:")
left_factoring(productions,non_terminal=non_terminal)
    
    
#output
S->aZ'
Z'->ε 
S->iEtSY'
Y'->ε |eS
